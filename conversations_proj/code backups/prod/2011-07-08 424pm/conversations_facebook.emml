<mashup xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.openmashup.org/schemas/v1.0/EMML/../schemas/EMMLPrestoSpec.xsd"
    xmlns="http://www.openmashup.org/schemas/v1.0/EMML"
    xmlns:macro="http://www.openmashup.org/schemas/v1.0/EMMLMacro"
    xmlns:presto="http://www.jackbe.com/v1.0/EMMLPrestoExtensions" 
    name="conversations_parser_facebook">
    <operation name="invoke">
        <output name="result" type="document"/>
        
         <!-- Input -->
    <input name="url_xx" type="string" default="http://www.facebook.com/feeds/page.php?id=22707976849format=rss20"></input>
    <input name="counter" type="number" default="1"></input>
    <input name="repetitive_elem" type="string" default="item"></input>
    <input name="limit" type="number" default="7"></input>
    <input name="feed_sourcetype" type="string" default="feed_source"></input>
    <input name="feed_keywords" type="string" default=""></input>
    
    <variable name="url" type="string" default="http://www.facebook.com/feeds/page.php?id=22707976849format=rss20"></variable>
 
        <script>
      <![CDATA[
        //OUTPUT VARIABLE FOR ALL
        var my_output = "output" + counter
      
        //Direct Invoke of the URL
          //Fuzzy Logic for & on Facebook URL
          url = url.replace("2707976849","2707976849&amp;");
        var res = ' <directinvoke feedtype="rss" endpoint="' + url + '" outputvariable="'+ my_output +'"/>'
        
      //NOTE: SEEMS LIKE RSS DO NOT NEED: Removing &'s to be able to parse this response.              
        //res = res + ' <variable name="mystring" type="string"/>'
        //res = res + '<script><![CDATA['
        //res = res + 'var mystring=""; var res = new Packages.java.lang.String('+ my_output +');'
        //res = res + 'res = res.replaceAll("&" , "&amp;");'
        //res = res + 'mystring = res;' 
        //res = res + "]]xxxx></script>"
        //res = res + '<assign fromvariable="mystring" outputvariable="'+ my_output +'" />';
        
        //Keywords/Hash Tags
        var keywords_split = feed_keywords.split(" ");
        var contains_string = ""
        
          //Creatring string for contains to include multiple keywords
          for(var i=0; i< keywords_split.length; i++){
            //Ignoring Case
            contains_string = contains_string + "contains(lower-case(.), lower-case('"+ keywords_split[i] + "') )"
            
            if( i != keywords_split.length - 1)
              contains_string = contains_string + " or ";
            
          }
        print(contains_string);
        
        res = res + '<filter inputvariable="'+ my_output + '"'
        res = res + ' filterexpr="//'+ repetitive_elem +'[title['+ contains_string +']]"';
        res = res + ' outputvariable="' + my_output + '" />' 
        
        //Applying limit
        res = res + '<filter inputvariable="'+ my_output + '"'
        res = res + ' filterexpr="//'+ repetitive_elem +'[position() = (1 to '+ limit +')]"'
        res = res + ' outputvariable="' + my_output + '" />'
 
      //Iterate in each repetitive elem.
      var item_root_start = "<item_root>";
      var item_root_end = "</item_root>";
      var item_string = "";
      
       for( var i = 1; i<=limit; i++){
         //item
         item_string = item_string + '<item>';
         
         //Entry
         item_string = item_string + '<entry>';
           item_string = item_string + '{$'+ my_output + '//*:' + repetitive_elem+ '['+ i +']//*:title' + '[1]//text()' +'}'
         item_string = item_string + '</entry>';
         
         //Created Time
         item_string = item_string  + '<created_time>'
           item_string = item_string + '{$'+ my_output + '//*:' + repetitive_elem+ '['+ i +']//*:pubDate' + '[1]//text()' +'}'
         item_string = item_string  + '</created_time>'
         
         //Source
         item_string = item_string + '<source>';
           item_string = item_string + feed_sourcetype;
         item_string = item_string + '</source>';
         
         //Source URI / Link
         item_string = item_string + '<link>';
           item_string = item_string + '{$'+ my_output + '//*:' + repetitive_elem+ '['+ i +']//*:link/text()' +'}'
         item_string = item_string + '</link>';
         
         // Author
         item_string = item_string + '<author>';
           item_string = item_string + '{$'+ my_output + '//*:' + repetitive_elem+ '['+ i +']//*:creator/text()' +'}'
         item_string = item_string + '</author>';
         
         //Closing Item
         item_string = item_string + '</item>';
       }
       
       //Get section with items/entries into a constructor
        res = res + '<constructor outputvariable="' + my_output +'">';
        res = res + item_root_start + item_string + item_root_end;
        res = res + '</constructor>';
        
          //Fuzzy logic to close the cdata section
          res = new Packages.java.lang.String(res);
        res = res.replaceAll("xxxx","");
        
        result = res;
        
        print(result);
    ]]>
  </script>
    </operation>
</mashup>â€‹