<mashup xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.openmashup.org/schemas/v1.0/EMML/../schemas/EMMLPrestoSpec.xsd"
	xmlns="http://www.openmashup.org/schemas/v1.0/EMML" xmlns:macro="http://www.openmashup.org/schemas/v1.0/EMMLMacro"
	name="conversations_controller">

	<operation name="invoke">
		<output name="result" type="string"></output>
		
		<variables>
			<variable name="feed_data" type="document"></variable>
			
			<variable name="dynamicScript" type="string"/>
			
			<variable name="emml_string" type="string"/>
			<variable name="final_emml" type="string"/>
			<variable name="emml_xml" type="document"></variable>
			<variable name="counter" type="number" default="0"></variable>
			<variable name="constructor" type="string"/>
			<variable name="feed_limit" type="number"></variable>
			<variable name="mashup_name" type="string"></variable>
			<variable name="serviceID" type="string"></variable>
			<variable name="feed_sourcetype" type="string"></variable>
			<variable name="jsonp_result" type="string"></variable>
			<variable name="feed_keywords" type="string"></variable>
			
		</variables>
		
		<!-- INPUT's -->
		<input name="jsonp" type="string" default="parseResponse"></input>
		<input name="configuration" type="document">
			<configuration>
				<name>ameMiami2</name>
				<feeds>
					<feed>
						<url>http://feeds.feedburner.com/IADPBlog</url>
						<keywords></keywords>
						<description>Some desc</description>
						<timeout>10000</timeout>
						<mandatory>true</mandatory>
						<active>true</active>
						<source_name>rss</source_name>
						<source_type>rss</source_type>
						<repeating_element>entry</repeating_element>
						<limit>10</limit>
					</feed>
					<feed>
						<url>http://twitter.com/statuses/user_timeline/intelinside.atom</url>
						<keywords></keywords>
						<description>Tweets about IntelInisde</description>
						<timeout>10000</timeout>
						<mandatory>true</mandatory>
						<active>true</active>
						<source_name>twitter</source_name>
						<source_type>twitter</source_type>
						<repeating_element>entry</repeating_element>
						<limit>5</limit>
					</feed>
					<feed>
						<url>http://www.facebook.com/feeds/page.php?id=22707976849format=rss20</url>
						<keywords></keywords>
						<description>Tweets about IntelInisde</description>
						<timeout>10000</timeout>
						<mandatory>true</mandatory>
						<active>true</active>
						<source_name>facebook</source_name>
						<source_type>facebook</source_type>
						<repeating_element>entry</repeating_element>
						<limit>5</limit>
					</feed>
				</feeds>
			</configuration>
		</input>
		
		
		<variable name="feed_url" type="string" default=""></variable>

		<!-- CONTROLLER LOGIC -->
		<display message="===BEGIN MASHUP CONTROLLER EXECUTION===" />
		
		<!-- ITERATE ON ALL THE FEEDS -->
		<foreach items="$configuration//feed" variable="feed">
			<!-- FEED URL -->
			<assign fromexpr="$feed//url/node()" outputvariable="feed_url" />
			<display message="::Controller will ask to visit url:" variable="feed_url" />
			<!-- Limit -->
			<assign fromexpr="$feed//limit/node()" outputvariable="feed_limit" />
			<display message="::Limit results to:" variable="feed_limit" />
			<!-- Keywords -->
			<assign fromexpr="$feed//keywords/node()" outputvariable="feed_keywords" />
			<script>
			<![CDATA[
  				counter = counter + 1; 
			]]>
			</script>

			<!-- CHECKING SOURCE TYPE -->
			<assign fromexpr="$feed//source_type/node()" outputvariable="feed_sourcetype"/>
			Â <if condition="$feed_sourcetype eq 'twitter' ">
				<!-- TWITTER -->
				<variable name="repetitive_elem" type="string" default="entry"></variable>
				<invoke operation="invoke" service="conversations_parser_twitter" inputvariables="feed_url, counter, repetitive_elem, feed_limit, feed_sourcetype, feed_keywords" outputvariable="feed_data"/>
				
				<!-- RSS -->
				<elseif condition="$feed_sourcetype eq 'rss' ">
					<variable name="repetitive_elem" type="string" default="item"></variable>
					<invoke operation="invoke" service="conversations_parser_rss" inputvariables="feed_url, counter, repetitive_elem, feed_limit, feed_sourcetype, feed_keywords" outputvariable="feed_data"/>
				</elseif>
				
				<!-- FEED -->				
				<elseif condition="$feed_sourcetype eq 'feed' ">
					<variable name="repetitive_elem" type="string" default="entry"></variable>
					<invoke operation="invoke" service="conversations_parser_feed" inputvariables="feed_url, counter, repetitive_elem, feed_limit, feed_sourcetype, feed_keywords" outputvariable="feed_data"/>
				</elseif>
				
				<!-- FACEBOOK -->				
				<elseif condition="$feed_sourcetype eq 'facebook' ">
					<variable name="repetitive_elem" type="string" default="item"></variable>
					<invoke operation="invoke" service="conversations_parser_facebook" inputvariables="feed_url, counter, repetitive_elem, feed_limit, feed_sourcetype, feed_keywords" outputvariable="feed_data"/>
				</elseif>
				
				<!-- FEED NOT SUPPORTED -->
				<else>
					<invoke operation="invoke" service="conversations_error" inputvariables="counter, feed_sourcetype" outputvariable="feed_data"/>
				</else>
			</if>
		
			
			<!-- CREATING XML STRUCTURE WHERE EACH LINE IS A MASHUP CODE -->
			<appendresult outputvariable="emml_xml">
					<mashup_code>
						{$feed_data}
					</mashup_code>
			</appendresult>
			 
		</foreach>

		<display message="Emml_String:" variable="emml_xml"/>
		
		<!-- Get Final MASHUP NAME -->
		<assign fromexpr="$configuration//name/node()" outputvariable="mashup_name"/>
		<!-- CREATE FINAL MASHUP CODE -->
		<script>
 	 	<![CDATA[
 	 		
  			var mashup_header = "<mashup xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://www.openmashup.org/schemas/v1.0/EMML/../schemas/EMMLPrestoSpec.xsd' xmlns='http://www.openmashup.org/schemas/v1.0/EMML' xmlns:macro='http://www.openmashup.org/schemas/v1.0/EMMLMacro' xmlns:presto='http://www.jackbe.com/v1.0/EMMLPrestoExtensions'";
  			mashup_header = mashup_header + " name='"+ mashup_name +"'><operation name='runMashup'>";
  			
  			var output = '<output name="result" type="string"></output>';
  			dynamicScript = mashup_header + output;
		]]>
		</script>
		
		<!-- Getting all the lines of every mashup -->
		<foreach items="$emml_xml//mashup_code" variable="mashup_item">
			<display message="MASHUP_ITEM:" variable="mashup_item"/>
			
			<script>
 	 		<![CDATA[  				
  				dynamicScript = dynamicScript + mashup_item;
			]]>
			</script>
		</foreach>
		<!-- Closing operation & mashup tag -->
		<assign fromexpr="count($configuration//feed)" outputvariable="feed_count"/>
		<display message="FEED COUNT:" variable="feed_count"/>
		
		<!-- Opening final Constructor -->
		<script>
 	 		<![CDATA[  				
  				constructor = '<constructor outputvariable="mashup_almost_ready">';
  				constructor = constructor + '<mashup>';
			]]>
		</script>
		
		<for variable="feed_number" startcountervalue="1" finalcountervalue="$feed_count">
			<display message="feed_number:" variable="feed_number"/>
			
			<script>
 	 		<![CDATA[  	
 	 			var output_number = 'output' + feed_number;
 	 			constructor = constructor + '{$'+ output_number +'//item[string-length( entry/string()) != 0]}'; //This last item is the tag name created in conversations_parser_feed.emml
 	 																											//Checking against the length of entry to put only items with valid text values (due to keyword filtering)
			]]>
			</script>
			
		</for>
		<!-- Closing final constructor -->
		<script>
 	 		<![CDATA[  				
  				constructor = constructor + '</mashup>';
  				constructor = constructor + '</constructor>';
  				
  				//////////////
  				// Adding last_updated
  				/////////////
  				
  				constructor = constructor + '<variable name="final_last_updated_value" type="string" default=""></variable>'
  				constructor = constructor + '<variable name="counter_for_items" type="number" default="0"></variable>'
  				//constructor = constructor + '<variable name="mashup_almost_ready" type="document" default=""></variable>'
    
    			constructor = constructor + "<foreach outputvariable='xx' variable='i' items='$mashup_almost_ready//*:created_time'>"
      
    			constructor = constructor + '<variable name="pubDates" type="string" default=""></variable>'
    			
    			constructor = constructor + "<assign fromexpr='$i/string()' outputvariable='pubDates' />"
    			
    			////Javascript logic
    			constructor = constructor + '<script><![CDATA['
    			constructor = constructor + 'counter_for_items++;'
          
		          //constructor = constructor + '//Check the date format.'
		          //constructor = constructor + 'print("Index of:" + pubDates.indexOf(",") )'
		          
		          //////
		          //constructor = constructor + '// Case When date is on this format: Mon, 20 Jun 2011 21:05:09 +0400'
		          /////
		          constructor = constructor + 'if( pubDates.indexOf(",") >= 0){'
		          
		          //constructor = constructor + '//Break date and time'
		          constructor = constructor + 'var date_time_split = pubDates.split(" ");'
		          
		          //constructor = constructor + '//Construct Date'
		          constructor = constructor + 'var year = date_time_split[3];'
		           constructor = constructor + 'var month = date_time_split[2];'
		        constructor = constructor + 'var day = date_time_split[1];'
		        
		        constructor = constructor + 'if(month == "Jan") month = "01";'
		          constructor = constructor + 'else if(month == "Feb") month = "02";'
		          constructor = constructor + 'else if(month == "Mar") month = "03";'
		          constructor = constructor + 'else if(month == "Abr") month = "04";'
		          constructor = constructor + 'else if(month == "May") month = "05";'
		          constructor = constructor + 'else if(month == "Jun") month = "06";'
		          constructor = constructor + 'else if(month == "Jul") month = "07";'
		          constructor = constructor + 'else if(month == "Aug") month = "08";'
		          constructor = constructor + 'else if(month == "Sep") month = "09";'
		          constructor = constructor + 'else if(month == "Oct") month = "10";'
		          constructor = constructor + 'else if(month == "Nov") month = "11";'
		          constructor = constructor + 'else if(month == "Dec") month = "12";'
		          
		          //constructor = constructor + '//Construct Time'
		          constructor = constructor + 'var time = date_time_split[4];'
		        constructor = constructor + 'var time_split = time.split(":");'
		        constructor = constructor + 'var hour = time_split[0];'
		        constructor = constructor + 'var min = time_split[1];'
		        constructor = constructor + 'var sec = time_split[2];'
		        
		        //constructor = constructor + '//Create Date-Time javascript obj'
		        constructor = constructor + 'var today = new Date();'
		        constructor = constructor + 'var that_date = new Date(year, month-1, day, hour-4, min, sec);' //Month is zero based index,-4 Cause the server is in the US EAST Coast
		        //print("that_date:" + that_date);
		        
		        constructor = constructor + 'var date_difference_milisecs = today - that_date;'
		            
		            constructor = constructor + 'var days_difference = parseInt( date_difference_milisecs / 86400000);'
		            //print("days_difference:" + days_difference);
		            
		            constructor = constructor + 'final_last_updated_value = days_difference;'
		            
		            constructor = constructor + 'if( final_last_updated_value == 0){'
		            //constructor = constructor + '//Get hours then'
		            constructor = constructor + 'var hours = parseInt(date_difference_milisecs / 3600000);'
		            
		            //print("Hours:"+hours);
		            
		            constructor = constructor + 'final_last_updated_value = hours;'
		            
		            constructor = constructor + 'if(final_last_updated_value == 0){'
		            //constructor = constructor + '//Then get Minutes'
		            constructor = constructor + 'var mins = parseInt(date_difference_milisecs / 60000);'
		            
		            constructor = constructor + 'final_last_updated_value = mins + " Minutes ago";'
		            
		            //print("Mins:"+ final_last_updated_value);
		        
		        constructor = constructor + '}'
		          constructor = constructor + 'else{'
		          	//constructor = constructor + '//Return hours ago'
		          	constructor = constructor + 'final_last_updated_value += " Hours ago";'
		          	constructor = constructor + '}'
		          constructor = constructor + '}'  
		          constructor = constructor + 'else{'
		          	//constructor = constructor + '//Return days ago'
		          	constructor = constructor + 'final_last_updated_value += " Days ago";'
		          	constructor = constructor +'}'
		          
		          //print("final_last_updated_value:"+final_last_updated_value);
		        
		        
		        constructor = constructor + '}'
		          //constructor = constructor +'//////'
		          //constructor = constructor + '// Case When date is on this format: 2011-06-21T16:43:26+00:00'
		          //constructor = constructor + '/////'
		          constructor = constructor + 'else{'
		          
		          	//constructor = constructor + '//Break date and time'
		          	constructor = constructor + 'var date_time_split = pubDates.split("T");'
		        	//print("date_time_split:"+ date_time_split);
		        
		        	constructor = constructor + 'var date_split = date_time_split[0];'
		        	constructor = constructor + 'var time_split = date_time_split[1];'
		        
		        	constructor = constructor + 'var date = date_split.split("-");'
		        	constructor = constructor + 'var time = time_split.split(":");'
		        
		        	//constructor = constructor + '//PENDING'
		        	//constructor = constructor + '//var time_zone_plus = time_split.indexOf("+"); //If time_zone_plus != 0, then it has a +'
		        	//constructor = constructor + '//var time_zone = time[2].split("+"); //This will get me the hours on index 1.'
		        	//print("time_zone:"+time_zone[1]);
		        
		        	//print("index of:" + time_split.indexOf("+"));
		        
		        	//print("date:"+date);
		        	//print("time:"+time);
		        
		        
		        	//constructor = constructor + '//Construct Date'
		        	constructor = constructor + 'var year = date[0];'
		        	constructor = constructor + 'var month = date[1];'
		        	constructor = constructor + 'var day = date[2];'
		        
		        	constructor = constructor + 'if(month == "Jan") month = "01";'
		          	constructor = constructor + 'else if(month == "Feb") month = "02";'
		          	constructor = constructor + 'else if(month == "Mar") month = "03";'
		          	constructor = constructor + 'else if(month == "Abr") month = "04";'
		          	constructor = constructor + 'else if(month == "May") month = "05";'
		          	constructor = constructor + 'else if(month == "Jun") month = "06";'
		          	constructor = constructor + 'else if(month == "Jul") month = "07";'
		          	constructor = constructor + 'else if(month == "Aug") month = "08";'
		          	constructor = constructor + 'else if(month == "Sep") month = "09";'
		          	constructor = constructor + 'else if(month == "Oct") month = "10";'
		          	constructor = constructor + 'else if(month == "Nov") month = "11";'
		          	constructor = constructor + 'else if(month == "Dec") month = "12";'
		          
		          	constructor = constructor + 'var hour = time[0];'
		        	constructor = constructor + 'var min = time[1];'
		        	constructor = constructor + 'var sec = "00";'
		        
		        	constructor = constructor + 'var today = new Date();'
		        	constructor = constructor + 'var that_date = new Date(year, month-1, day, hour-4, min, sec);' //Month is zero based index, -4 Cause the server is in the US EAST Coast
		        	//print("that_date:" + that_date);
		        
		        	constructor = constructor + 'var date_difference_milisecs = today - that_date;'
		            
		            constructor = constructor + 'var days_difference = parseInt( date_difference_milisecs / 86400000);'
		            //print("days_difference:" + days_difference);
		            
		            constructor = constructor + 'final_last_updated_value = days_difference;'
		            
		            constructor = constructor + 'if( final_last_updated_value == 0){'
		            	//constructor = constructor + '//Get hours then'
		            	constructor = constructor + 'var hours = parseInt(date_difference_milisecs / 3600000);'
		            
		            	//print("Hours:"+hours);
		            
		            	constructor = constructor + 'final_last_updated_value = hours;'
		            
		            	constructor = constructor + 'if(final_last_updated_value == 0){'
		            		//constructor = constructor + '//Then get Minutes'
		            		constructor = constructor + 'var mins = parseInt(date_difference_milisecs / 60000);'
		            
		            		constructor = constructor + 'final_last_updated_value = mins + " Minutes ago";'
		            
		            		//print("Mins:"+ final_last_updated_value);
		        
		        		constructor = constructor + '}'
		          		constructor = constructor + 'else{'
		          			//constructor = constructor +'//Return hours ago'
		          			constructor = constructor + 'final_last_updated_value += " Hours ago";'
		          		constructor = constructor +'}'
		          	constructor = constructor +'}'  
		          	constructor = constructor +'else{'
		          		//constructor = constructor +'//Return days ago'
		          		constructor = constructor + 'final_last_updated_value += " Days ago";'
		          	constructor = constructor +'}'
		          
		          	//print("final_last_updated_value:"+final_last_updated_value);
		        
		        	constructor = constructor +'}'		 
		        	constructor = constructor + "]]xxxx></script>"
		        
		        
		        constructor = constructor + "<annotate variable='mashup_almost_ready' expr='/*:mashup/*:item[$counter_for_items]'>"
        		constructor = constructor + "element last_updated {$final_last_updated_value}"
      			constructor = constructor + "</annotate>"      
      			
      			constructor = constructor + "</foreach>"
    
    			constructor = constructor + "<assign fromvariable='mashup_almost_ready' outputvariable='result' />"   
			]]>
		</script>
		
		<script>
 	 	<![CDATA[
 	 		//CONSTRUCTOR FOR PUTTING ALL TOGETHER
 	 		dynamicScript = dynamicScript + constructor
 	 	
 	 		//FUZZY LOGIC FOR REMOVING MASHUP_CODE tag
 	 		var res = new Packages.java.lang.String(dynamicScript);
  			res = res.replaceAll("<mashup_code>" , "");
  			res = res.replaceAll("</mashup_code>" , "");
  			res = res.replaceAll("xxxx" , "");
  			dynamicScript = res + "</operation></mashup>";
		]]>
		</script>
		
		<!-- EMML STRING THAT WAS CREATED AND ITS GOING TO BE SAVED -->
		<display message="This is the Groovy: " variable="dynamicScript"/>		
	
		<!-- SAVE MASHUP -->
		<!-- <invoke operation="invoke" service="converastions_publish_mashup" inputvariables="mashup_name, dynamicScript" outputvariable="serviceID"/> -->
	 	
	 	<!-- CONSTRUCTING FINAL RESULT jsonp FOR CLIENT
	 		parseResponse({"mashup":{"id":"Mashup_Generated_Name","url":"/presto/edge/api/rest/Mashup_Generated_Name/runMashup"}})
	 	 -->
	 	 <assign fromexpr="concat('/presto/edge/api/rest/', $serviceID, '/invoke?')" outputvariable="url"/>]
	 	 
	 	 <script>
 	 	<![CDATA[
 	 		//BUILDING THE JSONP STRING FOR RESULT
 	 		var jsonp_result = '{"mashup":{"id":"'+ serviceID + '", "url":"/presto/edge/api/rest/'+ serviceID + '/runMashup?x-p-anonymous=true&x-presto-resultFormat=json&callback='+ jsonp +'"}}';
 	 	
		]]>
		</script>
	 	<assign fromvariable="jsonp_result" outputvariable="result"/>
	 	 
		<display message="Result:" variable="result"/>
		
	</operation>
</mashup>
